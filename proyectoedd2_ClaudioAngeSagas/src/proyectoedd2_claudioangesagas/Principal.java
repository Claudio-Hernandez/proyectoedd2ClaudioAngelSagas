/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoedd2_claudioangesagas;

import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
//Las del video
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
//import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Text;

/*import javax.swing.text.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.TransformerFactory;*/
/**
 *
 * @author Usuario
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        this.setLocationRelativeTo(null);
        buttonGroup1.add(rb_si);
        buttonGroup1.add(rb_no);
        jComboBox2.setSelectedIndex(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        campos = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        rb_si = new javax.swing.JRadioButton();
        rb_no = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtable_campos = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        misArchivos = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        arbolArchivos = new javax.swing.JTree();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jt_archivoActual = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        registros_gui = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        botonGuardarRegistros = new javax.swing.JButton();
        botonBuscarRegistro = new javax.swing.JButton();
        botonEliminarRegistro = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_registro = new javax.swing.JTable();
        botonAgregarEspacio = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        fecha_de_modificacion = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        campoFiltro = new javax.swing.JTextField();
        textoFiltro = new javax.swing.JLabel();
        jButton26 = new javax.swing.JButton();
        estandarizacion = new javax.swing.JDialog();
        botonExcel = new javax.swing.JButton();
        botonXML = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        crearIndices_reindexar = new javax.swing.JDialog();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        reindexar = new javax.swing.JDialog();
        jButton25 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jt_reindexar = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        campos.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                camposWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                camposWindowClosing(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(45, 64, 89));

        jTextField1.setBackground(new java.awt.Color(222, 205, 195));
        jTextField1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("CAMPOS");

        jButton3.setBackground(new java.awt.Color(234, 84, 85));
        jButton3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton3.setText("Volver");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(234, 84, 85));
        jButton4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton4.setText("Agregar nuevo campo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(234, 84, 85));
        jButton7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton7.setText("Eliminar campo");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(234, 84, 85));
        jButton8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton8.setText("Modificar campo");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });

        jLabel5.setText("Nombre del campo");

        jLabel6.setText("Tipo");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "int", "char", "double", "String", "boolean" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox2MouseClicked(evt);
            }
        });

        jLabel7.setText("Longitud");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        jLabel8.setText("Es llave primaria?");

        rb_si.setText("Si");

        rb_no.setText("No");

        jtable_campos.setFont(new java.awt.Font("Segoe UI Symbol", 0, 12)); // NOI18N
        jtable_campos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo", "Longitud", "Llave Primaria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtable_campos.setGridColor(new java.awt.Color(51, 51, 51));
        jtable_campos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtable_camposMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtable_campos);

        jLabel9.setText("Para modificar/eliminar seleccione uno de la tabla");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jSpinner1))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(rb_si)
                                .addGap(18, 18, 18)
                                .addComponent(rb_no)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 313, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(79, 79, 79))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jButton3)
                                .addGap(324, 324, 324)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton7)))
                        .addGap(0, 565, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(26, 26, 26)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rb_si)
                                .addComponent(rb_no)
                                .addComponent(jLabel8))
                            .addGap(180, 180, 180))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57))))
        );

        javax.swing.GroupLayout camposLayout = new javax.swing.GroupLayout(campos.getContentPane());
        campos.getContentPane().setLayout(camposLayout);
        camposLayout.setHorizontalGroup(
            camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        camposLayout.setVerticalGroup(
            camposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        misArchivos.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                misArchivosWindowClosing(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(12, 34, 51));

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 87, 34));
        jLabel3.setText("Mis archivos");

        arbolArchivos.setBackground(new java.awt.Color(6, 84, 113));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Mis archivos");
        arbolArchivos.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        arbolArchivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                arbolArchivosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(arbolArchivos);

        jButton5.setBackground(new java.awt.Color(243, 10, 73));
        jButton5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton5.setText("Atras");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(243, 10, 73));
        jButton6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton6.setText("Guardar en este archivo seleccionado");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(243, 10, 73));
        jButton10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton10.setText("Abrir archivo");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(243, 10, 73));
        jButton11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton11.setText("Nuevo archivo");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jt_archivoActual.setEditable(false);
        jt_archivoActual.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setText("Archivo Actual:");

        jButton13.setBackground(new java.awt.Color(243, 10, 73));
        jButton13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton13.setText("Cerrar Archivo");
        jButton13.setEnabled(false);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(255, 0, 51));
        jButton14.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton14.setText("Listar Archivo");
        jButton14.setEnabled(false);
        jButton14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton14MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(200, 200, 200)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jt_archivoActual, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jt_archivoActual, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout misArchivosLayout = new javax.swing.GroupLayout(misArchivos.getContentPane());
        misArchivos.getContentPane().setLayout(misArchivosLayout);
        misArchivosLayout.setHorizontalGroup(
            misArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        misArchivosLayout.setVerticalGroup(
            misArchivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        registros_gui.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                registros_guiWindowClosing(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));
        jPanel4.setForeground(new java.awt.Color(0, 102, 102));

        botonGuardarRegistros.setText("Guardar Registros");
        botonGuardarRegistros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonGuardarRegistrosMouseClicked(evt);
            }
        });
        botonGuardarRegistros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                botonGuardarRegistrosKeyPressed(evt);
            }
        });

        botonBuscarRegistro.setText("BuscarRegistro");
        botonBuscarRegistro.setEnabled(false);
        botonBuscarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarRegistroActionPerformed(evt);
            }
        });

        botonEliminarRegistro.setText("Borrar Registros");
        botonEliminarRegistro.setEnabled(false);
        botonEliminarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarRegistroActionPerformed(evt);
            }
        });

        tabla_registro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla_registro);

        botonAgregarEspacio.setText("Agregar espacio de nuevo Registro");
        botonAgregarEspacio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarEspacioActionPerformed(evt);
            }
        });

        jButton17.setText("Atras");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        fecha_de_modificacion.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        fecha_de_modificacion.setText("Fecha de modificacion");

        jLabel10.setBackground(new java.awt.Color(0, 153, 204));
        jLabel10.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel10.setText("Ultima modificacion del archivo:");

        textoFiltro.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        textoFiltro.setText("Buscar registros que contengan:");

        jButton26.setText("Cargar registros");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton17)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fecha_de_modificacion)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textoFiltro)
                        .addGap(1, 1, 1)
                        .addComponent(campoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 470, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botonAgregarEspacio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonGuardarRegistros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonBuscarRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonEliminarRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(fecha_de_modificacion))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(botonAgregarEspacio, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonGuardarRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton26, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botonBuscarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonEliminarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoFiltro)
                    .addComponent(campoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(132, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout registros_guiLayout = new javax.swing.GroupLayout(registros_gui.getContentPane());
        registros_gui.getContentPane().setLayout(registros_guiLayout);
        registros_guiLayout.setHorizontalGroup(
            registros_guiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        registros_guiLayout.setVerticalGroup(
            registros_guiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        estandarizacion.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                estandarizacionWindowClosing(evt);
            }
        });

        botonExcel.setText("Exportar a Excel");
        botonExcel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonExcelMouseClicked(evt);
            }
        });

        botonXML.setText("Exportar a XML");
        botonXML.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonXMLMouseClicked(evt);
            }
        });

        jButton22.setText("Volver");
        jButton22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton22MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout estandarizacionLayout = new javax.swing.GroupLayout(estandarizacion.getContentPane());
        estandarizacion.getContentPane().setLayout(estandarizacionLayout);
        estandarizacionLayout.setHorizontalGroup(
            estandarizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estandarizacionLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(botonExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(botonXML, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, estandarizacionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        estandarizacionLayout.setVerticalGroup(
            estandarizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estandarizacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(estandarizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonXML, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82))
        );

        crearIndices_reindexar.setBackground(new java.awt.Color(204, 102, 255));
        crearIndices_reindexar.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                crearIndices_reindexarWindowClosing(evt);
            }
        });

        jButton23.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton23.setText("Crear Indices");
        jButton23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton23MouseClicked(evt);
            }
        });

        jButton24.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton24.setText("Reindexar");
        jButton24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton24MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout crearIndices_reindexarLayout = new javax.swing.GroupLayout(crearIndices_reindexar.getContentPane());
        crearIndices_reindexar.getContentPane().setLayout(crearIndices_reindexarLayout);
        crearIndices_reindexarLayout.setHorizontalGroup(
            crearIndices_reindexarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, crearIndices_reindexarLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );
        crearIndices_reindexarLayout.setVerticalGroup(
            crearIndices_reindexarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, crearIndices_reindexarLayout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addGroup(crearIndices_reindexarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        reindexar.setBackground(new java.awt.Color(102, 0, 255));

        jButton25.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton25.setText("Reindexar");
        jButton25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton25MouseClicked(evt);
            }
        });

        jt_reindexar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jt_reindexar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Campos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jt_reindexar);

        javax.swing.GroupLayout reindexarLayout = new javax.swing.GroupLayout(reindexar.getContentPane());
        reindexar.getContentPane().setLayout(reindexarLayout);
        reindexarLayout.setHorizontalGroup(
            reindexarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reindexarLayout.createSequentialGroup()
                .addGroup(reindexarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reindexarLayout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reindexarLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        reindexarLayout.setVerticalGroup(
            reindexarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reindexarLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(26, 26, 46));

        jButton1.setBackground(new java.awt.Color(78, 17, 132));
        jButton1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton1.setText("Agregar campo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(78, 17, 132));
        jButton2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton2.setText("Archivos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Bienvenido");

        jButton12.setText("APAGAR");
        jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton12MouseClicked(evt);
            }
        });

        jButton20.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton20.setText("Registros");
        jButton20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton20MouseClicked(evt);
            }
        });
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton19.setBackground(new java.awt.Color(78, 17, 132));
        jButton19.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton19.setText("Indices");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton9.setText("Estandarización");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(251, 251, 251))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton12)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 237, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addComponent(jButton19, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                .addGap(113, 113, 113))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(319, 319, 319)
                .addComponent(jButton9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jButton12)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        campos.pack();
        campos.setLocationRelativeTo(this);
        campos.setVisible(true);
        this.setVisible(false);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        actualizarArchivos();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //Guardar campos 
        JOptionPane.showMessageDialog(null, "Estas seguro que quieres guardar en este archivo ?\n recurda que puedes cambiarlo cuando desees.");
        try {
            try {

                if (!metadata.getCampos().isEmpty() && !ubicacionActual.equals("")) {//Tiene que haber campos para guardar y una ubicacion actual

                    metadata.escribirCampos(new File(ubicacionActual));
                } else {
                    JOptionPane.showMessageDialog(campos, "Campos vacios" + "\n"
                            + "Para guardar se necesitan campos");
                }

            } catch (NullPointerException ex) {//Si no
                JOptionPane.showMessageDialog(campos, "Archivo no seleccionado");
            }
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        misArchivos.dispose();
        this.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void arbolArchivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_arbolArchivosMouseClicked

    }//GEN-LAST:event_arbolArchivosMouseClicked

    public void actualizarArchivos() {

        DefaultTreeModel m = (DefaultTreeModel) arbolArchivos.getModel();
        m.setRoot(new DefaultMutableTreeNode(file.getName()));
        listar_no_orden(file, (DefaultMutableTreeNode) m.getRoot());
        misArchivos.pack();
        misArchivos.setLocationRelativeTo(null);
        misArchivos.setVisible(true);
        this.setVisible(false);

    }
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        String rutaAcrear = "./registros/";
        String nombre = JOptionPane.showInputDialog(misArchivos, "Escribe el nombre del nuevo archivo");
        nombre += ".txt";
        File file = new File(rutaAcrear + nombre);
        FileOutputStream fw = null;
        ObjectOutputStream bw = null;

        try {

            fw = new FileOutputStream(file);
            bw = new ObjectOutputStream(fw);
            bw.flush();
            JOptionPane.showMessageDialog(misArchivos, "El archivo fue guardado con exito");
            misArchivos.dispose();
            actualizarArchivos();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(misArchivos, "Hubo un error");

            try {
                if (file.createNewFile()) {
                    JOptionPane.showMessageDialog(misArchivos, "El archivo fue creado con exito");
                    misArchivos.dispose();
                    actualizarArchivos();
                } else {
                    JOptionPane.showMessageDialog(misArchivos, "Hubo un error");
                }
            } catch (IOException ex1) {

            }

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(misArchivos, "Hubo un error");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (jtable_campos.getSelectedRow() >= 0) {

            DefaultTableModel modelo
                    = (DefaultTableModel) jtable_campos.getModel();

            if ((boolean) modelo.getValueAt(jtable_campos.getSelectedRow(), 3)) {
                JOptionPane.showMessageDialog(null, "No puede eliminar este campo, porque es llave primaria");
            } else {

                if (metadata.getCampos().isEmpty() != true) {

                    metadata.getCampos().remove(jtable_campos.getSelectedRow());
                }

                modelo.removeRow(jtable_campos.getSelectedRow());

                jtable_campos.setModel(modelo);

                JOptionPane.showMessageDialog(null, "El registro se eliminó con éxito");
            }
            jtable_campos.clearSelection();
        } else {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún elemento de la tabla para eliminar");
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    boolean yaHayLlave() {//Para saber si ya hay una llave primaria en la tabla de camapos
        boolean yaHayLlave = false;
        for (int i = 0; i < jtable_campos.getRowCount(); i++) {
            if ((boolean) jtable_campos.getValueAt(i, 3)) {
                yaHayLlave = true;
                break;
            } else {
                yaHayLlave = false;
            }
        }
        return yaHayLlave;
    }

    boolean yaHayCampoConEseNombre() {
        boolean ya = false;
        String x = jTextField1.getText().toLowerCase(), y;
        for (int i = 0; i < jtable_campos.getRowCount(); i++) {
            y = ((String) jtable_campos.getValueAt(i, 0)).toLowerCase();
            if (x.equals(y)) {
                ya = true;
                break;
            } else {
                ya = false;
            }
        }
        return ya;
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (jTextField1.getText().equals("") || (rb_si.isSelected() == false && rb_no.isSelected() == false)) {
            JOptionPane.showMessageDialog(null, "Faltan datos para crear campo");
        } else {
            if (yaHayLlave() && rb_si.isSelected()) {
                JOptionPane.showMessageDialog(null, "Ya existe una llave primaria en la tabla de campos");
                buttonGroup1.clearSelection();
            } else if (!yaHayCampoConEseNombre()) {
                String nombreCampo = jTextField1.getText();
                String tipoCampo = "";
                tipoCampo = (String) jComboBox2.getModel().getSelectedItem();
                int bo = (int) jSpinner1.getModel().getValue();
                boolean lp = false; //llave primaria
                if (rb_si.isSelected()) {
                    lp = true;
                } else if (rb_no.isSelected()) {
                    lp = false;
                }
                metadata.addCampo(new Campos(nombreCampo, tipoCampo, bo, lp));
                DefaultTableModel modelo = (DefaultTableModel) jtable_campos.getModel();
                Object[] newrow = {
                    nombreCampo, tipoCampo, bo, lp
                };
                modelo.addRow(newrow);
                jtable_campos.setModel(modelo); //*

                JOptionPane.showMessageDialog(null, "Se agregó el campo");
                jTextField1.setText("");
                buttonGroup1.clearSelection();
                jSpinner1.setValue(1);
                jComboBox2.setSelectedIndex(1);
            } else {
                JOptionPane.showMessageDialog(null, "Ya existe un campo con ese nombre, ingrese un nombre distinto");
                jTextField1.setText("");
            }

        }
        jtable_campos.clearSelection();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (!yaHayLlave() && jtable_campos.getRowCount() >= 1) {
            JOptionPane.showMessageDialog(null, "ERROR, No hay ningún campo seleccionado como llave primaria. Por favor, escoja un"
                    + " campo de los existentes y modifíquelo para que sea campo llave, o cree un campo nuevo que sea campo llave");
        } else {
            campos.dispose();
            this.setVisible(true);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jtable_camposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtable_camposMouseClicked

    }//GEN-LAST:event_jtable_camposMouseClicked

    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked
        if (jtable_campos.getSelectedRow() >= 0) {

            if (jTextField1.getText().equals("") || (int) jSpinner1.getValue() == 0
                    || (rb_si.isSelected() == false && rb_no.isSelected() == false)) {
                JOptionPane.showMessageDialog(null, "Ingrese datos válidos para modificar el campo");
            } else {
                if (yaHayLlave() && rb_si.isSelected() && (boolean) jtable_campos.getValueAt(jtable_campos.getSelectedRow(), 3) == false) {
                    JOptionPane.showMessageDialog(null, "Ya existe una llave primaria en la tabla de campos");
                    buttonGroup1.clearSelection();
                } else {
                    DefaultTableModel modelo
                            = (DefaultTableModel) jtable_campos.getModel();
                    //modelo.removeRow(jtable_campos.getSelectedRow());
                    modelo.setValueAt(jTextField1.getText(), jtable_campos.getSelectedRow(), 0);
                    modelo.setValueAt((String) jComboBox2.getSelectedItem(), jtable_campos.getSelectedRow(), 1);
                    modelo.setValueAt((int) jSpinner1.getValue(), jtable_campos.getSelectedRow(), 2);
                    boolean b = false;
                    if (rb_si.isSelected()) {
                        b = true;
                    } else if (rb_no.isSelected()) {
                        b = false;
                    }

                    // MODIFICAR ARRAYLIST DE CAMPOS
                    if (metadata.getCampos().isEmpty() != true) {
                        metadata.getCampos().get(jtable_campos.getSelectedRow()).setNombre(jTextField1.getText());
                        metadata.getCampos().get(jtable_campos.getSelectedRow()).setTipo((String) jComboBox2.getSelectedItem());
                        metadata.getCampos().get(jtable_campos.getSelectedRow()).setByteoffset((int) jSpinner1.getValue());
                        metadata.getCampos().get(jtable_campos.getSelectedRow()).setLlavePrimaria(b);
                    }

                    modelo.setValueAt(b, jtable_campos.getSelectedRow(), 3);
                    buttonGroup1.clearSelection();
                    jTextField1.setText("");

                    jtable_campos.clearSelection();
                    JOptionPane.showMessageDialog(null, "EL registro se modificó con éxito");

                }
                jtable_campos.clearSelection();
            }

        } else {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún campo de la tabla");
        }

    }//GEN-LAST:event_jButton8MouseClicked

    public void cargarMetadata() throws FileNotFoundException {
        try {

            Scanner myReader = new Scanner(new File(ubicacionActual));
            DefaultTableModel modelo = (DefaultTableModel) jtable_campos.getModel();

            borrarElementosTabla();//Limpiar tabla
            metadata.getCampos().clear();//Se limpia todo lo que pueda haber en la metadata
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                String[] camposLinea = data.split(";");
                for (String Campo : camposLinea) {
                    //Conseguir el nombre
                    try {

                        String[] campSpLit = Campo.split(":"); //Nombre:Tipo[num] = (Nombre)(Tipo[num]llave)
                        String nom = campSpLit[0];
                        String tipo = "";

                        //Conseguir el tipo
                        String[] typeSplit = campSpLit[1].split("\\[");// Tipo[Num] = (Tipo)(num]llave)
                        tipo = typeSplit[0];

                        //Conseguir llave primaria
                        String[] split = typeSplit[1].split("]");

                        boolean getLlave = false;
                        if (split[1].equals("1")) {
                            getLlave = true;
                        }

                        int len = Integer.parseInt(split[0]);

                        //Agregar a la tabla
                        Object[] newrow = {
                            nom, tipo, len, getLlave
                        };

                        metadata.getCampos().add(new Campos(nom, tipo, len, getLlave));

                        //Ojo cambiar como saber si es llaveprimaria
                        modelo.addRow(newrow);
                    } catch (ArrayIndexOutOfBoundsException ex) {
                    }
                }
            }
            jtable_campos.setModel(modelo);
        } catch (NullPointerException ex) {

        }

    }


    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // ABRIR ARCHIVO

        //Habilitar opciones de archivos
        jButton6.setEnabled(true);
        jButton13.setEnabled(true);
        jButton14.setEnabled(true);

        try {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) arbolArchivos.getSelectionPath().getLastPathComponent();

            jt_archivoActual.setText(selectedNode.getUserObject().toString());

            ubicacionActual = rutaArchivo + selectedNode.getUserObject().toString();

            //Cargar Arbol
            AdminArbol adar = new AdminArbol("./registros/" + "Arbol.indices");
            if (adar.getArchivo().exists()) {
                adar.setArbol(arbolB);
                adar.cargarArchivo();
                arbolB = adar.getArbol();
            }

        } catch (NullPointerException ex) {//Si no
            JOptionPane.showMessageDialog(campos, "Archivo no seleccionado");
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    public void borrarElementosTabla() {
        DefaultTableModel dm1 = (DefaultTableModel) jtable_campos.getModel();
        dm1.setRowCount(0);
    }


    private void jButton12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseClicked
        // APAGAR SYSTEMA
        int showConfirmDialog = JOptionPane.showConfirmDialog(campos, "¿Seguro que desea salir?");
        if (showConfirmDialog == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_jButton12MouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // Cerrar Archivo

        //Habilitar opciones de archivos
        jButton6.setEnabled(false);
        jButton13.setEnabled(false);
        jButton14.setEnabled(false);

        jt_archivoActual.setText("");
        ubicacionActual = "";
        metadata.getCampos().clear();
        borrarElementosTabla();

        JOptionPane.showMessageDialog(campos, "Archivo cerrado");
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jComboBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox2MouseClicked


    }//GEN-LAST:event_jComboBox2MouseClicked

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        if (jComboBox2.getSelectedItem().equals("int")) {
            jSpinner1.setEnabled(false);
            jSpinner1.setValue(4);
        } else if (jComboBox2.getSelectedItem().equals("char")) {
            jSpinner1.setEnabled(false);
            jSpinner1.setValue(1);
        } else if (jComboBox2.getSelectedItem().equals("double")) {
            jSpinner1.setEnabled(false);
            jSpinner1.setValue(8);
        } else if (jComboBox2.getSelectedItem().equals("boolean")) {
            jSpinner1.setEnabled(false);
            jSpinner1.setValue(2);
        } else {
            jSpinner1.setEnabled(true);
            jSpinner1.setValue(1);
        }
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    public void abrirVentanaP() {
        //Abrir pantalla principal
        this.pack();
        this.setLocationRelativeTo(this);
        this.setVisible(true);
    }


    private void camposWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_camposWindowClosing
        //Volver abrir la pantalla principal cuando se cierra el JDialog campos 
        abrirVentanaP();
    }//GEN-LAST:event_camposWindowClosing

    private void camposWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_camposWindowClosed

    }//GEN-LAST:event_camposWindowClosed

    private void misArchivosWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_misArchivosWindowClosing
        abrirVentanaP();
    }//GEN-LAST:event_misArchivosWindowClosing

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int showConfirmDialog = JOptionPane.showConfirmDialog(campos, "¿Seguro que desea salir?");
        if (showConfirmDialog == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButton14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton14MouseClicked
        try {
            if (!ubicacionActual.equals("")) {
                cargarMetadata();

                JOptionPane.showMessageDialog(campos, "Campos Cargados exitosamente");
            } else {
                JOptionPane.showMessageDialog(campos, "Tiene que abrir un archivo primero");
            }

        } catch (FileNotFoundException ex) {

        }
    }//GEN-LAST:event_jButton14MouseClicked

    private void botonBuscarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarRegistroActionPerformed
        campoFiltro.setVisible(true);//los hago visibles
        textoFiltro.setVisible(true);//los hago visibles
        TableRowSorter<TableModel> filtrarResultados = new TableRowSorter<>(tabla_registro.getModel());//este el sorteador de las filas
        tabla_registro.setRowSorter(filtrarResultados);//asigno este nuevo sorteador a la fila
        campoFiltro.getDocument().addDocumentListener(new DocumentListener() {//hago el listener para que escuche entradas y se cambie
            //esto solo son metodos abstractos 
            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = campoFiltro.getText();

                if (text.trim().length() == 0) {
                    filtrarResultados.setRowFilter(null);//si no hay nada ingresado el sorteador nor ecibe actualizacion
                } else {
                    filtrarResultados.setRowFilter(RowFilter.regexFilter("(?i)" + text));//si hay algo ingresado hace la busqueda con el texto que se obtiene
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = campoFiltro.getText();//este metodo es un lisener para cuando se va eliminando del campo texto/ al irse eliminando voy actualizando el sorteador

                if (text.trim().length() == 0) {
                    filtrarResultados.setRowFilter(null);
                } else {
                    filtrarResultados.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });

        //registros_gui.setLayout(new BorderLayout());
        //registros_gui.add(panel, BorderLayout.SOUTH);
        //registros_gui.add(new JScrollPane(tabla_registro), BorderLayout.CENTER);
        // TODO add your handling code here:
    }//GEN-LAST:event_botonBuscarRegistroActionPerformed

    private void jButton20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton20MouseClicked

        campoFiltro.setVisible(false);
        textoFiltro.setVisible(false);
        File registrosPrueba = new File(ubicacionActual);

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

        fecha_de_modificacion.setText(sdf.format(registrosPrueba.lastModified()));

        DefaultTableModel modelotablaCampos = (DefaultTableModel) jtable_campos.getModel();
        int numerodeColumnas = modelotablaCampos.getRowCount();
        ArrayList<Class> types = new ArrayList();
        for (int i = 0; i < modelotablaCampos.getRowCount(); i++) {

            String tipo = modelotablaCampos.getValueAt(i, 1).toString();
            switch (tipo) {
                case "boolean": {

                    types.add(java.lang.Boolean.class);

                    break;
                }
                case "String": {
                    types.add(java.lang.String.class);

                    break;
                }
                case "char": {
                    types.add(java.lang.Character.class);

                    break;
                }
                case "double": {
                    types.add(java.lang.Double.class);

                    break;
                }
                case "int": {
                    types.add(java.lang.Integer.class);//agrego la clase correspondiente
                    break;
                }

            }

        }//tomo las clases

        //System.out.println(types);
        DefaultTableModel modelopersonalizado = new DefaultTableModel() {

            ArrayList<Class> clases = types;

            @Override
            public Class getColumnClass(int columnIndex) {
                return types.get(columnIndex);
            }
        };

        modelopersonalizado.setColumnCount(0);
        for (int i = 0; i < modelotablaCampos.getRowCount(); i++) {
            //modeloTablaRegistros.addColumn(modelotablaCampos.getValueAt(i, 0));
            modelopersonalizado.addColumn(modelotablaCampos.getValueAt(i, 0));

        }
        tabla_registro.setModel(modelopersonalizado);
        DefaultTableModel modeloRegistros = (DefaultTableModel) tabla_registro.getModel();

        this.setVisible(false);

        cargarRegistros();
        registros_gui.pack();
        registros_gui.setLocationRelativeTo(this);
        registros_gui.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton20MouseClicked

    private void botonGuardarRegistrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonGuardarRegistrosMouseClicked
        String registroTemp = "";
        Llave llaveTemp;
        DefaultTableModel modeloTablaRegistros = (DefaultTableModel) tabla_registro.getModel();
        boolean flag = true;

        if (tabla_registro.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(registros_gui, "Primero selecciona el registro que deseas guardar");

        } else {
            String nombre = tabla_registro.getColumnName(1);
            System.out.println(nombre);
            for (int i = 0; i < modeloTablaRegistros.getRowCount(); i++) {
                for (int k = 0; k < modeloTablaRegistros.getColumnCount(); k++) {
                    if (modeloTablaRegistros.getColumnCount() - k == 1) {
                        registroTemp += modeloTablaRegistros.getValueAt(i, k);
                        //System.out.println(registroTemp);

                    } else {
                        if (modeloTablaRegistros.getValueAt(i, k) == null) {
                            flag = false;
                            break;

                        } else {
                            registroTemp += modeloTablaRegistros.getValueAt(i, k);
                            registroTemp += "|";
                        }

                    }

                }
                System.out.println(registroTemp);

                if (flag) {
                    registros.add(registroTemp);
                    Llave llave = new Llave();
                    String llavePrimaria = modeloTablaRegistros.getValueAt(i, 0).toString();
                    llave.setLlave(llavePrimaria);
                    llave.setTamanio(registroTemp.length());
                    registros.add(registroTemp);
                    llaves.add(llave);
                    if (arbolB.getRaiz() != null) {
                        for (int k = 0; k < registros.size(); k++) {
                            String[] llave2 = registros.get(k).split("[|]");
                            String llavePrimaria2 = llave2[0];
                            Llave llaveTemp2 = new Llave();
                            llaveTemp2.setLlave(llavePrimaria);
                            if (arbolB.buscar(llaveTemp2.getLlave()) != null) {
                                registros.remove(i);
                                llaves.remove(i);
                                JOptionPane.showMessageDialog(registros_gui, "No pueden haber llaves repetidas: " + llavePrimaria);
                                vaciarTabla();
                            }
                        }
                    }
                    if (!registros.isEmpty()) {
                        JOptionPane.showMessageDialog(registros_gui, "Registro guardado con exito");
                        vaciarTabla();

                    }

                } else {
                    JOptionPane.showMessageDialog(registros_gui, "No pueden haber espacios en blanco");

                }
                registroTemp = "";

            }

        }

        // registroTemp="";

    }//GEN-LAST:event_botonGuardarRegistrosMouseClicked
    public void escribirRegistros(String registro) throws IOException {
        File registroArchivo = new File(ubicacionActual);
        FileWriter fw = new FileWriter(registroArchivo, true);
        BufferedWriter bw = new BufferedWriter(fw);
        PrintWriter pw = new PrintWriter(bw);

        pw.print(registro);
        pw.println();

        // pw.println();
        pw.flush();

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

        fecha_de_modificacion.setText(sdf.format(registroArchivo.lastModified()));
        pw.close();

    }
    private void botonAgregarEspacioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarEspacioActionPerformed
        DefaultTableModel modeloTablaRegistros = (DefaultTableModel) tabla_registro.getModel();
        Object[] b = {};
        modeloTablaRegistros.addRow(b);
        JOptionPane.showMessageDialog(registros_gui, "LLena los espacios correspondiente en la nueva fila que se creo en la tabla");

        // TODO add your handling code here:
    }//GEN-LAST:event_botonAgregarEspacioActionPerformed

    private void botonGuardarRegistrosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_botonGuardarRegistrosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonGuardarRegistrosKeyPressed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        registros_gui.dispose();
        this.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        // Abrir indices
        crearIndices_reindexar.pack();
        crearIndices_reindexar.setLocationRelativeTo(this);
        crearIndices_reindexar.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        estandarizacion.pack();
        estandarizacion.setLocationRelativeTo(this);
        estandarizacion.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void botonExcelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonExcelMouseClicked
        if (ubicacionActual.equals("") || ubicacionActual.equals(null)) {
            JOptionPane.showMessageDialog(null, "No se ha abierto ningún archivo");
        } else {
            File prueba = new File(ubicacionActual);
            if (prueba.exists()) {
                FileReader fr = null;
                BufferedReader br = null;
                try {
                    fr = new FileReader(prueba);
                    br = new BufferedReader(fr);
                    String read;
                    String[] array = new String[0];
                    //String[] encabezado = {"City ID", "City Name"};

                    //Ponerle el encabezado de los registros en la primera fila de excel, ejemplo: Nombre, Apellido, Edad
                    Workbook wb = new XSSFWorkbook();
                    Sheet sheet = wb.createSheet("Registros");
                    Row rowCol = sheet.createRow(0);
                    for (int i = 0; i < jtable_campos.getRowCount(); i++) {
                        Cell cell = rowCol.createCell(i);
                        if (jtable_campos.getValueAt(i, 0) != null) {
                            cell.setCellValue((String) jtable_campos.getValueAt(i, 0));
                        }
                    }
                    //FIN de ponerle el encabezado

                    int j = 0;
                    boolean oneMore = false;
                    while ((read = br.readLine()) != null) {
                        if (read.equals("@@@")) {
                            oneMore = true;
                        }
                        if (oneMore == true && !read.equals("@@@")) {
                            array = read.split("\\|");

                            Row row = sheet.createRow(j + 1);
                            for (int k = 0; k < array.length; k++) {
                                Cell cell = row.createCell(k);
                                if (array[k] != null) {
                                    cell.setCellValue(array[k]);
                                }
                            }
                            j++;
                        }
                    }
                    FileOutputStream out = new FileOutputStream(new File("RegistrosExportados.xlsx"));
                    wb.write(out);

                    /*for(int i=0; i<array.length; i++){
                    System.out.println(array[i]);
                }*/
                    System.out.println("Todo salió bien");
                    JOptionPane.showMessageDialog(null, "Registros exportados a Excel satisfactoriamente");
                } catch (Exception e) {
                    System.out.println(e);
                }
                try {
                    br.close();
                    fr.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Archivo no encontrado");
            }
        }

    }//GEN-LAST:event_botonExcelMouseClicked

    private void jButton22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton22MouseClicked
        estandarizacion.dispose();
        this.setVisible(true);
    }//GEN-LAST:event_jButton22MouseClicked

    private void botonXMLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonXMLMouseClicked
        if (ubicacionActual.equals("") || ubicacionActual == null) {
            JOptionPane.showMessageDialog(null, "No se ha abierto ningún archivo");
        } else {
            if (jtable_campos.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Aún no se han cargado o creado campos, la tabla de campos está vacía");
            } else {
                try {
                    crearXML("Campos");
                } catch (TransformerException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(null, "El archivo XML se creó con éxito");
            }
        }
    }//GEN-LAST:event_botonXMLMouseClicked

    private void jButton23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton23MouseClicked
        // Crear Indices
        if (arbolB.getRaiz() != null) {
            AdminArbol adar = new AdminArbol("./registros/" + "Arbol.indices");
            adar.setArbol(arbolB);
            adar.escribirArchivo();
            JOptionPane.showMessageDialog(this, "Se ha guardado el archivo del arbol ", "Información", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButton23MouseClicked

    private void crearIndices_reindexarWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_crearIndices_reindexarWindowClosing
        abrirVentanaP();
    }//GEN-LAST:event_crearIndices_reindexarWindowClosing

    private void registros_guiWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_registros_guiWindowClosing
        abrirVentanaP();
    }//GEN-LAST:event_registros_guiWindowClosing

    private void estandarizacionWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_estandarizacionWindowClosing
        abrirVentanaP();
    }//GEN-LAST:event_estandarizacionWindowClosing

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton24MouseClicked
        String temp = "";

        DefaultTableModel model = (DefaultTableModel) jt_reindexar.getModel();

        for (int i = 0; i < metadata.getCampos().size(); i++) {
            int llave = 0;
            if (!metadata.getCampos().get(i).isLlavePrimaria()) {
                llave = 1;
            }
            model.addRow(new Object[]{metadata.getCampos().get(i).getNombre() + ":" + metadata.getCampos().get(i).getTipo() + "[" + metadata.getCampos().get(i).getByteoffset() + "]" + llave});

        }

        reindexar.pack();
        reindexar.setLocationRelativeTo(this);
        reindexar.setVisible(true);
        reindexar.setModal(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton24MouseClicked

    private void jButton25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton25MouseClicked
        // Reindexar
        if (jt_reindexar.getSelectedRow() >= 0) {
            AdminArbol adar = new AdminArbol("./registros/" + "Arbol.indices");
            adar.setArbol(arbolB);
            adar.escribirArchivo();
            JOptionPane.showMessageDialog(this, "Se han reindexado los registros exitosamente", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Ningun campo seleccionado");
        }


    }//GEN-LAST:event_jButton25MouseClicked

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        // TODO add your handling code here:
        String archivo = "";

        if (ubicacionActual.equals("./registros/personfile.txt")) {
            archivo = "./registros/Registros1.txt";
            //System.out.println(archivo);
        } else if (ubicacionActual.equals("./registros/cityfile.txt")) {

            archivo = "./registros/Registros2.txt";
            //System.out.println(archivo);

        }
        System.out.println(ubicacionActual);
        File archivoCargar = new File(archivo);

        if (archivoCargar.exists()) {

            FileReader fr = null;
            BufferedReader br = null;
            try {
                fr = new FileReader(archivoCargar);
                br = new BufferedReader(fr);
                String linea = "";
                while ((linea = br.readLine()) != null) {
                    String[] registro = linea.split("[|]");
                    int tamanoLlave = 0;
                    for (int i = 0; i < registro.length; i++) {
                        tamanoLlave += registro[i].length();
                    }
                    Llave llave = new Llave();
                    llave.setLlave(registro[0]);
                    llave.setTamanio(tamanoLlave);
                    registros.add(linea);
                    llaves.add(llave);
                }
                // System.out.println(registros);
                guardarRegistroEnArchivo();
                JOptionPane.showMessageDialog(this, "Se ha cargado el archivo exitosamente");
            } catch (Exception e) {
            }
            try {
                br.close();
                fr.close();
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            //JOptionPane.showMessageDialog(null, "Registros cargados con exito");
            //cargarRegistros();
            botonBuscarRegistro.setEnabled(true);
            registros_gui.dispose();
            registros_gui.pack();
            registros_gui.setLocationRelativeTo(null);
            registros_gui.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(null, "El archivo no se pudo encontrar");

        }
    }//GEN-LAST:event_jButton26ActionPerformed

    private void botonEliminarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarRegistroActionPerformed
        // borrar
        RandomAccessFile archivoActual;


    }//GEN-LAST:event_botonEliminarRegistroActionPerformed
    public void actualizarTablaRegistros() {
        // cargarRegistros();
        registros_gui.dispose();
        registros_gui.pack();
        registros_gui.setLocationRelativeTo(null);
        registros_gui.setVisible(true);

    }

    public void vaciarTabla() {
        DefaultTableModel modeloRegistros = (DefaultTableModel) tabla_registro.getModel();
        modeloRegistros.setRowCount(0);
    }

    public void guardarRegistroEnArchivo() throws FileNotFoundException, IOException {
        archivoAhorita = new RandomAccessFile(new File(ubicacionActual), "rw");
        posicionArchivo = archivoAhorita.length();
        for (int i = 0; i < registros.size(); i++) {
            llaves.get(i).setByteoffset(posicionArchivo);
            arbolB.intertar(llaves.get(i));
            archivoAhorita.seek(posicionArchivo);
            archivoAhorita.write(registros.get(i).getBytes());
            posicionArchivo += registros.get(i).length();
            
            archivoAhorita.seek(posicionArchivo);
            archivoAhorita.write("\n".getBytes());
            posicionArchivo++;

        }

    }

    public void cargarRegistros() {
        DefaultTableModel modeloRegistros = (DefaultTableModel) tabla_registro.getModel();
        modeloRegistros.setRowCount(0);
        File registrosPrueba = new File(ubicacionActual);
        if (registrosPrueba.exists()) {
            FileReader fr = null;
            BufferedReader br = null;
            try {
                fr = new FileReader(registrosPrueba);
                br = new BufferedReader(fr);
                String linea = "";
                boolean flag = false;
                while ((linea = br.readLine()) != null) {
                    if (flag == true) {
                        System.out.println("entra");
                        String[] registro = linea.split("[|]");
                        int tamanoLlave = 0;
                        for (int i = 0; i < registro.length; i++) {
                            tamanoLlave += registro[i].length();

                        }
                        Object[] row = new Object[modeloRegistros.getColumnCount()];
                        System.out.println(modeloRegistros.getColumnCount());
                        System.out.println(linea);
                        for (int i = 0; i < registro.length; i++) {
                            System.out.println(registro[i]);
                            if (registro[i].equals("true")) {
                                boolean v;
                                v = true;
                                row[i] = v;

                            } else if (registro[i].equals("false")) {
                                boolean c;
                                c = false;
                                row[i] = false;

                            } else {

                                row[i] = registro[i];
                            }

                        }
                        modeloRegistros.addRow(row);
                        for (int i = 0; i < row.length; i++) {
                            System.out.print(row[i] + "  ");
                        }
                        Llave llave = new Llave();
                        llave.setLlave(linea);

                        llave.setTamanio(tamanoLlave);
                        registros.add(linea);
                        llaves.add(llave);
                    }
                    if (linea.equals("@@@")) {
                        flag = true;
                    }

                }

                // Object[] registroNuevo =  new Object[tamanio];
            } catch (Exception e) {
            }
            try {
                br.close();
                fr.close();
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    public void crearXML(String filename) throws TransformerException {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            DOMImplementation implementation = builder.getDOMImplementation();
            Document document = (Document) implementation.createDocument(null, filename, null);
            document.setXmlVersion("1.0");

            //Obtener los valores de la tabla
            ArrayList<String> nombres = new ArrayList();
            ArrayList<String> tipos = new ArrayList();
            ArrayList<String> longitud = new ArrayList();
            ArrayList<String> llaveprimaria = new ArrayList();

            for (int i = 0; i < jtable_campos.getRowCount(); i++) {
                nombres.add((String) jtable_campos.getValueAt(i, 0));
                tipos.add((String) jtable_campos.getValueAt(i, 1));

                //Integer
                Integer n = (Integer) jtable_campos.getValueAt(i, 2);
                String x = n.toString();
                longitud.add(x);

                //Boolean
                boolean b = (boolean) jtable_campos.getModel().getValueAt(i, 3);
                String valor = "";
                if (b) {
                    valor = "SI";
                } else {
                    valor = "NO";
                }
                llaveprimaria.add(valor);
            }
            //FIN de obtener los valores de la tabla

            //NODO RAIZ
            Element raiz = document.getDocumentElement();
            for (int i = 0; i < nombres.size(); i++) {
                Element itemNode = document.createElement("Campo_" + (i + 1));

                Element nameNode = document.createElement("NOMBRE");
                Text nodeNameValue = document.createTextNode("" + nombres.get(i));
                nameNode.appendChild(nodeNameValue);

                Element typeNode = document.createElement("TIPO");
                Text nodeTypeValue = document.createTextNode("" + tipos.get(i));
                typeNode.appendChild(nodeTypeValue);

                Element lengthNode = document.createElement("LONGITUD");
                Text nodeLengthValue = document.createTextNode("" + longitud.get(i));
                lengthNode.appendChild(nodeLengthValue);

                Element isKey = document.createElement("LLAVE");
                Text nodeIsKey = document.createTextNode("" + llaveprimaria.get(i));
                isKey.appendChild(nodeIsKey);

                itemNode.appendChild(nameNode);
                itemNode.appendChild(typeNode);
                itemNode.appendChild(lengthNode);
                itemNode.appendChild(isKey);

                raiz.appendChild(itemNode);
            }

            //GENERA XML
            Source source = new DOMSource(document);
            //DONDE SE GUARDARA
            Result result = new StreamResult(new java.io.File(filename + ".xml"));
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.transform(source, result);

        } catch (ParserConfigurationException e) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, e);
        }
        /*try {
            String file = filename;
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            
            Document doc = docBuilder.newDocument();
            Element rootElement = doc.createElement("Campos");
            doc.appendChild(rootElement);
            
            String array[] = {"Nombre","Tipo","Longitud","LLave_Primaria"};
            for(int i=0; i<jtable_campos.getRowCount(); i++){
                Element rows = doc.createElement("Fila");
                rootElement.appendChild(rows);
                
                Attr attr = doc.createAttribute("id");
                attr.setValue((i+1)+"");
                rows.setAttributeNode(attr);
                
                for(int j=0; j<jtable_campos.getColumnCount(); j++){
                    //Element element = doc.createElement((String) jtable_campos.getTableHeader().getColumnModel().getColumn(j).getHeaderValue());
                    Element element = doc.createElement(array[j]);
                    if((jtable_campos.getValueAt(i, j)) instanceof Integer){
                        Integer n = (Integer)jtable_campos.getModel().getValueAt(i, j);
                        String value = n.toString();
                        element.appendChild(doc.createTextNode(value+""));
                        rows.appendChild(element);
                    }
                    else if((jtable_campos.getValueAt(i, j)) instanceof Boolean){
                        boolean b = (boolean)jtable_campos.getModel().getValueAt(i, j);
                        String valor = "";
                        if(b){
                            valor = "SI";
                        }
                        else{
                            valor = "NO";
                        }
                        element.appendChild(doc.createTextNode(valor+""));
                        rows.appendChild(element);
                    }
                    else{
                        element.appendChild(doc.createTextNode((String) jtable_campos.getModel().getValueAt(i, j)+""));//ojo aquí
                        rows.appendChild(element);
                    } 
                }
            }
            
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            
            DOMSource source = new DOMSource(doc);
            StreamResult result;
            
            try {
                FileOutputStream fileOutputStream = null;
                File arch = new File(file+".xml");
                //FileOutputStream FileOutputStream = new FileOutputStream(new File(file+".xml"));
                FileOutputStream FileOutputStream = new FileOutputStream(arch);
                result = new StreamResult(fileOutputStream);
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                transformer.transform(source, result);
                if(arch.exists()){
                    System.out.println("SI");
                }
                else{
                    System.out.println("NO");
                }
                try {
                    fileOutputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            
        } catch (ParserConfigurationException poe) {
            
            poe.printStackTrace();
        } 
        catch (TransformerException te){
            te.printStackTrace();
        }*/
    }

    public void listar_no_orden(File p_raiz, DefaultMutableTreeNode nodo) {
        try {
            for (File temp : p_raiz.listFiles()) {
                if (temp.isFile()) {
                    DefaultMutableTreeNode n = new DefaultMutableTreeNode(
                            temp.getName());
                    nodo.add(n);
                } else {
                    DefaultMutableTreeNode n = new DefaultMutableTreeNode(
                            temp.getName());
                    nodo.add(n);
                    listar_no_orden(temp, n);
                }
            }
        } catch (Exception e) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    //Variables Globales
    ArrayList<String> registros = new ArrayList<String>();
    ArrayList<Llave> llaves = new ArrayList();
    String rutaArchivo = "./registros/";
    File file = new File(rutaArchivo);//el archivo al que vamos a guardar
    Metadata metadata = new Metadata();
    String ubicacionActual = "";
    Arbol arbolB = new Arbol(null, 6);
    Llave llaveactual = null;
    RandomAccessFile archivoAhorita;
    long posicionArchivo;

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbolArchivos;
    private javax.swing.JButton botonAgregarEspacio;
    private javax.swing.JButton botonBuscarRegistro;
    private javax.swing.JButton botonEliminarRegistro;
    private javax.swing.JButton botonExcel;
    private javax.swing.JButton botonGuardarRegistros;
    private javax.swing.JButton botonXML;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField campoFiltro;
    private javax.swing.JDialog campos;
    private javax.swing.JDialog crearIndices_reindexar;
    private javax.swing.JDialog estandarizacion;
    private javax.swing.JLabel fecha_de_modificacion;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jt_archivoActual;
    private javax.swing.JTable jt_reindexar;
    private javax.swing.JTable jtable_campos;
    private javax.swing.JDialog misArchivos;
    private javax.swing.JRadioButton rb_no;
    private javax.swing.JRadioButton rb_si;
    private javax.swing.JDialog registros_gui;
    private javax.swing.JDialog reindexar;
    private javax.swing.JTable tabla_registro;
    private javax.swing.JLabel textoFiltro;
    // End of variables declaration//GEN-END:variables

}
